# 289、生命游戏
from typing import List


class Solution:
    def gameOfLife(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m = len(board)
        n = len(board[0])
        cells = {}
        for i in range(m):
            for j in range(n):
                cells[(i, j)] = 0
        for i in range(m):
            for j in range(n):
                if board[i][j] == '■':
                    for k in range(-1, 2):
                        for l in range(-1, 2):
                            if k == 0 and l == 0:
                                continue
                            loc = (i + k, j + l)
                            if -1 in loc or loc[0] == m or loc[1] == n:
                                continue
                            cells[loc] += 1
        for i in cells:
            if cells[i] < 2 or cells[i] > 3:
                board[i[0]][i[1]] = '□'
            elif cells[i] == 3:
                board[i[0]][i[1]] = '■'


initial_board = [['□', '□', '■', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□'],
                 ['□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '■', '■', '■', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '■', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '■', '■', '■', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '■', '□', '□', '■', '■', '■', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□'],
                 ['□', '■', '□', '■', '■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '■', '■'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '■', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '■', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '■', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '□', '□'],
                 ['□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '■', '■', '■', '□', '□', '□', '□', '■', '□', '■', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□']]
s = Solution()


def generator(bd: List[List[str]]):
    while True:
        s.gameOfLife(bd)
        yield


g = generator(initial_board)
print('Start!')
print('Initial board:\n', '\n'.join(list(map(lambda x: '\t'.join(list(map(lambda y: str(y), x))), initial_board))))
index = 1
while True:
    get = input('')
    if get == 'end':
        break
    print('\n', index, '\n')
    next(g)
    print('\n'.join(list(map(lambda x: '\t'.join(list(map(lambda y: str(y), x))), initial_board))))
    index += 1
print('The End')


'''
initial_board = [['□', '□', '■', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□'],
                 ['□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '■', '■', '■', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '■', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '■', '■', '■', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '■', '□', '□', '■', '■', '■', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□'],
                 ['□', '■', '□', '■', '■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '■', '■'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '■', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '■', '■', '□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '■', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '■', '□', '□', '□', '□', '■', '□', '□', '□'],
                 ['□', '□', '■', '□', '□', '□', '□', '□', '□', '□', '□', '■', '■', '■', '□', '□', '□', '□', '■', '□', '■', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '□', '■', '□', '□', '□', '■', '□']]
initial_board = [['□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '■', '■', '■', '□', '□', '□'],
                 ['□', '□', '■', '□', '□', '□', '■', '□', '□'],
                 ['□', '□', '■', '□', '□', '□', '■', '□', '□'],
                 ['□', '□', '■', '□', '□', '□', '■', '□', '□'],
                 ['□', '□', '□', '■', '■', '■', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□'],
                 ['□', '□', '□', '□', '□', '□', '□', '□', '□']]
'''



